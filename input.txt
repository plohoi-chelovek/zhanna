public class JTextArea
extends JTextComponent
A JTextArea is a multi-line area that displays plain text. It is intended to be a lightweight component that provides source compatibility with the java.awt.TextArea class where it can reasonably do so. You can find information and examples of using all the text components in Using Text Components, a section in The Java Tutorial.
This component has capabilities not found in the java.awt.TextArea class. The superclass should be consulted for additional capabilities. Alternative multi-line text classes with more capabilities are JTextPane and JEditorPane.

The java.awt.TextArea internally handles scrolling. JTextArea is different in that it doesn't manage scrolling, but implements the swing Scrollable interface. This allows it to be placed inside a JScrollPane if scrolling behavior is desired, and used directly if scrolling is not desired.

The java.awt.TextArea has the ability to do line wrapping. This was controlled by the horizontal scrolling policy. Since scrolling is not done by JTextArea directly, backward compatibility must be provided another way. JTextArea has a bound property for line wrapping that controls whether or not it will wrap lines. By default, the line wrapping property is set to false (not wrapped).

java.awt.TextArea has two properties rows and columns that are used to determine the preferred size. JTextArea uses these properties to indicate the preferred size of the viewport when placed inside a JScrollPane to match the functionality provided by java.awt.TextArea. JTextArea has a preferred size of what is needed to display all of the text, so that it functions properly inside of a JScrollPane. If the value for rows or columns is equal to zero, the preferred size along that axis is used for the viewport preferred size along the same axis.

The java.awt.TextArea could be monitored for changes by adding a TextListener for TextEvents. In the JTextComponent based components, changes are broadcasted from the model via a DocumentEvent to DocumentListeners. The DocumentEvent gives the location of the change and the kind of change if desired. The code fragment might look something like:

    DocumentListener myListener = ??;
    JTextArea myArea = ??;
    myArea.getDocument().addDocumentListener(myListener);
 
Newlines
For a discussion on how newlines are handled, see DefaultEditorKit.
Warning: Swing is not thread safe. For more information see Swing's Threading Policy.

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeansTM has been added to the java.beans package. Please see XMLEncoder.

See Also:
JTextPane, JEditorPane
.22 How can I make Emacs automatically scroll horizontally?

In Emacs 21 and later, this is on by default: if the variable truncate-lines is non-nil in the current buffer, Emacs automatically scrolls the display horizontally when point moves off the left or right edge of the window.

Note that this is overridden by the variable truncate-partial-width-windows if that variable is non-nil and the current buffer is not full-frame width.

In Emacs 20, use hscroll-mode.

Next: Turning off beeping, Previous: Horizontal scrolling, Up: Common requests
5.23 How do I make Emacs “typeover” or “overwrite” instead of inserting?

M-x overwrite-mode (a minor mode). This toggles overwrite-mode on and off, so exiting from overwrite-mode is as easy as another M-x overwrite-mode.

On some systems, <Insert> toggles overwrite-mode on and off.

Next: Turning the volume down, Previous: Overwrite mode, Up: Common requests
5.24 How do I stop Emacs from beeping on a terminal?

Martin R. Frank writes:

Tell Emacs to use the visible bell instead of the audible bell, and set the visible bell to nothing.

That is, put the following in your TERMCAP environment variable (assuming you have one):

     ... :vb=: ...
And evaluate the following Lisp form:

     (setq visible-bell t)
Next: Automatic indentation, Previous: Turning off beeping, Up: Common requests
5.25 How do I turn down the bell volume in Emacs running under X?

On X Window system, you can adjust the bell volume and duration for all programs with the shell command xset.

Invoking xset without any arguments produces some basic information, including the following:

     usage:  xset [-display host:dpy] option ...
       To turn bell off:
           -b                b off               b 0
       To set bell volume, pitch and duration:
            b [vol [pitch [dur]]]          b on
Next: Matching parentheses, Previous: Turning the volume down, Up: Common requests
5.26 How do I tell Emacs to automatically indent a new line to the indentation of the previous line?

Such behavior is automatic (in Text mode) in Emacs 20 and later. From the etc/NEWS file for Emacs 20.2:

     ** In Text mode, now only blank lines separate paragraphs.  This makes
     it possible to get the full benefit of Adaptive Fill mode in Text mode,
     and other modes derived from it (such as Mail mode).  <TAB> in Text
     mode now runs the command indent-relative; this makes a practical
     difference only when you use indented paragraphs.
     
     If you want spaces at the beginning of a line to start a paragraph, use
     the new mode, Paragraph Indent Text mode.
If you have auto-fill-mode turned on (see Turning on auto-fill by default), you can tell Emacs to prefix every line with a certain character sequence, the fill prefix. Type the prefix at the beginning of a line, position point after it, and then type C-x . (set-fill-prefix) to set the fill prefix. Thereafter, auto-filling will automatically put the fill prefix at the beginning of new lines, and M-q (fill-paragraph) will maintain any fill prefix when refilling the paragraph.

If you have paragraphs with different levels of indentation, you will have to set the fill prefix to the correct value each time you move to a new paragraph. There are many packages available to deal with this (see Packages that do not come with Emacs). Look for “fill” and “indent” keywords for guidance.
